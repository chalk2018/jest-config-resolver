const path=require("path"),fs=require("fs"),lodash=require("lodash"),dependenciesResolver=o=>{const r=/^\<depDir\>[\\\/]/;return o.depDir||(o.depDir="<rootDir>/__test__/__dep__"),o.depMapper||(o.depMapper={}),lodash.mapValues(o.depMapper,e=>path.join(o.depDir,e.replace(r,"")))},jestConfigResolver=e=>{const o={moduleNameMapper:{"^src/(.*)$":"<rootDir>/src/$1"}};var r=path.resolve();if(e.ts&&fs.existsSync(path.join(r,"tsconfig.json"))){o.preset="ts-jest",o.testEnvironment="node",o.globals={"ts-jest":{tsconfig:"tsconfig.json"}};const p=require("ts-jest/utils")["pathsToModuleNameMapper"];var t=require(path.join(r,"tsconfig.json"))["compilerOptions"];o.moduleNameMapper={...o.moduleNameMapper,...p(t.paths,{prefix:"<rootDir>"})},o.moduleNameMapper={...o.moduleNameMapper,...dependenciesResolver(e)}}else{if(fs.existsSync(path.join(r,"jsconfig.json"))){const a=require("ts-jest/utils")["pathsToModuleNameMapper"];t=require(path.join(r,"jsconfig.json"))["compilerOptions"];o.moduleNameMapper={...o.moduleNameMapper,...a(t.paths,{prefix:"<rootDir>"})}}o.moduleNameMapper={...o.moduleNameMapper,...dependenciesResolver(e)}}o.testMatch=["<rootDir>/__test__/**/*.{ts,js}"],o.testPathIgnorePatterns=["<rootDir>/node_modules","<rootDir>/coverage","<rootDir>/__test__/coverage","(.*)/__dep__"],o.collectCoverage=!0,o.collectCoverageFrom=["**/src/**/*.{ts,js}","!**/node_modules/**"],o.coverageDirectory="<rootDir>/__test__/coverage",o.coveragePathIgnorePatterns=["<rootDir>/node_modules/","<rootDir>/__test__/*","<rootDir>/coverage/*","(.*)/__dep__"],o.coverageReporters=["clover","json","lcov",["text",{skipFull:!0}]],o.coverageThreshold={global:{branches:80,functions:80,lines:80,statements:-10}},o.coverageThreshold=void 0;let s=lodash.omit(e,["onlyAdded","depDir","depMapper","ts"]);for(const i of e.onlyAdded||[])"[object Array]"===Object.prototype.toString.call(o[i])?o[i]=[...o[i],...s[i]||[]]:"[object Object]"===Object.prototype.toString.call(o[i])?o[i]={...o[i],...s[i]||{}}:o[i]=s[i],s=lodash.omit(s,[i]);return{...o,...s}};module.exports=jestConfigResolver;
